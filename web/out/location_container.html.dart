// Auto-generated from location_container.html.
// DO NOT EDIT.

library location_container;

import 'dart:html' as autogenerated;
import 'dart:svg' as autogenerated_svg;
import 'package:web_ui/web_ui.dart' as autogenerated;
import 'package:web_ui/observe/observable.dart' as __observe;
import 'package:web_ui/web_ui.dart';
import 'package:dart_prototype/dart_prototype_library.dart';


   
        class LocationContainer extends WebComponent with Observable  {
  /** Autogenerated from the template. */

  autogenerated.ScopedCssMapper _css;

  /** This field is deprecated, use getShadowRoot instead. */
  get _root => getShadowRoot("location-container");
  static final __html1 = new autogenerated.LIElement(), __shadowTemplate = new autogenerated.DocumentFragment.html('''
        <div>
          <ul id="location-list">
            <template></template>
          </ul>        
        </div>
      ''');
  autogenerated.Element __e3;
  autogenerated.Template __t;

  void created_autogenerated() {
    var __root = createShadowRoot("location-container");
    setScopedCss("location-container", new autogenerated.ScopedCssMapper({"location-container":"[is=\"location-container\"]"}));
    _css = getScopedCss("location-container");
    __t = new autogenerated.Template(__root);
    __root.nodes.add(__shadowTemplate.clone(true));
    __e3 = __root.nodes[1].nodes[1].nodes[1];
    __t.loop(__e3, () => locations, ($list, $index, __t) {
      var location = $list[$index];
      var __e2;
      __e2 = __html1.clone(true);
      var __binding1 = __t.contentBind(() => location.name, false);
      __e2.nodes.add(__binding1);
    __t.addAll([new autogenerated.Text('\n              '),
        __e2,
        new autogenerated.Text('\n            ')]);
    });
    __t.create();
  }

  void inserted_autogenerated() {
    __t.insert();
  }

  void removed_autogenerated() {
    __t.remove();
    __t = __e3 = null;
  }

  /** Original code from the component. */

          
          WebService __$locationService;
          WebService get locationService {
            if (__observe.observeReads) {
              __observe.notifyRead(this, __observe.ChangeRecord.FIELD, 'locationService');
            }
            return __$locationService;
          }
          set locationService(WebService value) {
            if (__observe.hasObservers(this)) {
              __observe.notifyChange(this, __observe.ChangeRecord.FIELD, 'locationService',
                  __$locationService, value);
            }
            __$locationService = value;
          }
  
          final ObservableList<Location> locations = new ObservableList<Location>();
       
          LocationContainer() {  
          }      
      
          inserted() {
            refreshLocations();
          }
      
          void refreshLocations() {
            print('refreshing...');
            locationService.call("/locations").then((response) {
                locations.clear();
                locations.addAll(response);
            });
          }
        }        
      
//# sourceMappingURL=location_container.html.dart.map